block('block-example')(

    def()(function() {
        var enb = this.ctx.builder && this.ctx.builder.enb,
            prefix = this.ctx.prefix,
            example = this.ctx.example,
            bemjson,
            title,
            name,
            url,
            urlBemhtml;

        if(enb) {
            var path = (example.url || example.path).replace(/\.(ru|en)/, ''),
                parts = path.split('/'),
                data = this.data,
                lang = data.lang,
                examplesData = data.node.source.data[lang].examples;

            // get name of example
            name = parts[parts.length - 1];

            // check what data structure
            if(parts[parts.length - 1] === parts[parts.length - 2]) {
                // old structure enb-bem-docs
                url = prefix + '/' + path + '.html';
            } else {
                // new structure enb-bem-docs
                url = prefix + '/' + path + '/' + name + '.html';
                bemjson = prefix + '/' + path + '/_' + name + '.bemjson.js';

                // get source bemjson if it inline example
                examplesData.forEach(function(example){
                    if(example.source && example.name === name) {
                        bemjson = example.source;
                        urlBemhtml = prefix + '/' + path + '/' + name + '.bemhtml.js';
                    }
                });
            }
        } else {
            title = example.title;
            url = prefix + '/' + example.url + '.ru.html';
            bemjson = prefix + '/' + example.url + '.bemjson.js';
            name = example.url.replace(/.+\//, '');
        }

        return applyNext({
            _title: title,
            _name: name,
            _url: url,
            _bemjson: bemjson,
            _urlBemhtml: urlBemhtml
        });
    }),

    content()(function() {
        var title = this._title,
            name = this._name,
            url = this._url;

        return [
            {
                elem: 'header',
                attrs: { id: name },
                content: [
                    {
                        elem: 'anchor',
                        url: '#' + name
                    },
                    {
                        elem: 'blank',
                        url: url,
                        content: (title && name) ? title + ' (' + name + ')' : ''
                    },
                    {
                        elem: 'source-switcher',
                        elemMods: { type: 'bemjson' },
                        content: 'bemjson'
                    }
                ]
            },
            { elem: 'source' },
            {
                elem: 'live-wrap',
                content: [
                    {
                        elem: 'live-spin'
                    },
                    {
                        elem: 'live',
                        url: url
                    }
                ]
            }
        ];
    }),

    match(function() { return !this._bemjson; })(
        elem('source-switcher')(
            def()(function() {
                return false;
            })
        ),
        elem('source')(
            def()(function() {
                return false;
            })
        )
    )
);
